 
@* Retrives results from the database and shows them in the UI as the table. (Single tournament) *@
 
@using ChessTournamentManager.Controllers
@using DatabaseCommunicator.Models
@using TournamentLibrary.Participants
@using TournamentLibrary.TournamentParts

@rendermode @(new InteractiveServerRenderMode(false))

@inject TournamentController TournamentController


<RoundRobinTableView Participants="@_participants" PairsWithResults="@_pairsWithResults"></RoundRobinTableView>


@code {

	/// <summary>
	/// Id of the tournament
	/// </summary>
	[Parameter]
	public string TournamentId { get; set; }

	/// <summary>
	/// All matches of the tournament
	/// </summary>
	private List<RoundPair<Player>> _pairsWithResults { get; set; } = [];

	/// <summary>
	/// All players registered in the tournament
	/// </summary>
	private List<Player> _participants { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		await ReloadData();
	}

	/// <summary>
	/// Retreives data for round robin table from the database
	/// </summary>
	/// <returns></returns>
	public async Task ReloadData()
	{
		_pairsWithResults = await TournamentController.GetTournamentPairs(TournamentId);
		_pairsWithResults = _pairsWithResults.Where(x => x.WhiteScore > 0 || x.BlackScore > 0).ToList();
		_participants = (await TournamentController.GetAllPlayersInTournament(TournamentId)).ToList();
		await InvokeAsync(StateHasChanged);
	}
}