
@* Shows registered participants in the tournament *@

@using ChessTournamentManager.CodeStructures
@using ChessTournamentManager.Controllers
@using ChessTournamentManager.DataServices
@using ChessTournamentManager.LanguageAssets.TournamentManagementLabels
@using ChessTournamentMate.Shared
@using Microsoft.Extensions.Localization
@using TournamentLibrary.Participants;
@using TournamentLibrary.TournamentParts;
@using DatabaseCommunicator.Models;

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject NavigationUrls NavigationToUrls

@inject TournamentController TournamentController
@inject TournamentManagingController TournamentManagingController

@inject IStringLocalizer<TournamentManagementLabels> _localizer

@rendermode @(new InteractiveServerRenderMode(false))


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">

@if (_loaded)
{
	<div class="mt-3">
		<UIResponseRender Message="_message"></UIResponseRender>
	</div>

	<div class="mt-3">
		@if (registeredParticipants?.Count > 0)
		{
			<h3>@_localizer["registeredPlayersNumberOfRegisteredPlayers"] @(registeredParticipants.Count)</h3>
		}
	</div>

	<div class="mt-3">
		@if (registeredParticipants?.Count() > 0)
		{
			<PlayersSelectionList RegisteredParticipants="registeredParticipants"
								  PlayerSelectedForDelete="OnDeleteParticipant"
								  PlayerSelectedForInfo="PlayerSelectedForInfo"
								  PlayerSelectedForPerformance="ShowPlayerTournamentResults"
								  DeletePlayersDisabled="(_tournament?.HasStarted ?? false) || (_tournament?.IsTeam ?? false) || DisableEdit">
			</PlayersSelectionList>
		}
	</div>

	<div>
		@if (_playersToDelete.Count() != 0)
		{
			<SaveCancelButtons OnSaveChanges="@SaveChanges" OnCancelChanges="@Cancel"></SaveCancelButtons>
		}
	</div>
}



@code {

	/// <summary>
	/// Id of the tournament
	/// </summary>
	[Parameter]
	public string TournamentId { get; set; }

	/// <summary>
	/// User cannot manipulate with registered participants
	/// </summary>
	[Parameter]
	public bool DisableEdit { get; set; } = false;

	/// <summary>
	/// Information about the tournament
	/// </summary>
	private Tournament? _tournament;

	/// <summary>
	/// All players registered in the tournament
	/// </summary>
	private List<Player> registeredParticipants = [];

	//// <summary>
	/// Message in the UI
	/// </summary>
	private QuickResponseMessage? _message;

	/// <summary>
	/// Players which will be removed from the tournament after save button click
	/// </summary>
	private List<string> _playersToDelete = [];

	/// <summary>
	/// Page was loaded
	/// </summary>
	private bool _loaded = false;

	/// <summary>
	/// Removes player from the tournament - not yet saved
	/// </summary>
	/// <param name="participantId"></param>
	private void OnDeleteParticipant(string participantId)
	{
		_playersToDelete.Add(participantId);
		registeredParticipants.RemoveAll(x => x.Id == participantId);
	}

	/// <summary>
	/// Deletes players from the tournament - save the changed in the database
	/// </summary>
	/// <returns></returns>
	private async Task SaveChanges()
	{
		await TournamentManagingController.DeleteParticipantsFromTournament(TournamentId, _playersToDelete);
		_playersToDelete = [];
		_message = new SuccessfulMessage(_localizer["registeredPlayersDeleteConfirmation"]);
		await InvokeAsync(StateHasChanged);
	}

	/// <summary>
	/// Players which were supposed to be deleted will be returned back
	/// </summary>
	/// <returns></returns>
	private async Task Cancel()
	{
		_playersToDelete = [];
		_message = null;
		await GetAllPlayersInTournament();
		await InvokeAsync(StateHasChanged);
	}

	protected override async Task OnInitializedAsync()
	{
		await ReloadData();
	}

	protected override async Task OnParametersSetAsync()
	{
		await ReloadData();
	}

	/// <summary>
	/// Refresh all information in the component
	/// </summary>
	/// <returns></returns>
	public async Task ReloadData()
	{
		_loaded = false;
		await GetAllPlayersInTournament();
		await GetTournamentInformation();
		_loaded = true;
		await InvokeAsync(StateHasChanged);
	}

	/// <summary>
	/// Retreives information about tournament from the database
	/// </summary>
	/// <returns></returns>
	private async Task GetTournamentInformation()
	{
		_tournament = await TournamentController.GetTournamentInformation(TournamentId);
	}

	/// <summary>
	/// Shows page with information about the player
	/// </summary>
	/// <param name="playerId">Id of the player</param>
	private void PlayerSelectedForInfo(string playerId)
	{
		NavigationToUrls.ToPlayerProfile(playerId);
	}

	/// <summary>
	/// Shows page where are matches of the specific player
	/// </summary>
	/// <param name="playerId">Id of the player</param>
	private void ShowPlayerTournamentResults(string playerId)
	{
		NavigationToUrls.ToPlayerTournamentPerformance(TournamentId, playerId);
	}

	/// <summary>
	/// Retreives all players registered in the tournament from database
	/// </summary>
	/// <returns></returns>
	public async Task GetAllPlayersInTournament()
	{
		registeredParticipants = [];
		try
		{
			registeredParticipants = (await TournamentController.GetAllPlayersInTournament(TournamentId)).ToList();
		}
		catch
		{
			_message = new UnsuccessfulMessage(_localizer["registeredPlayersCannotGetPlayersFromDatabase"]);
			return;
		}
		if(registeredParticipants.Count() == 0)
		{
			_message = new NotExistsInDatabase(_localizer["registeredPlayersNoPlayers"]);
		}
		else
		{
			_message = null;
		}
	}
}
