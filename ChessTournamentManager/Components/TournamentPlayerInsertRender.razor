@using ChessTournamentManager.CodeStructures
@using ChessTournamentManager.DataServices
@using ChessTournamentManager.LanguageAssets.TournamentManagementLabels
@using ChessTournamentMate.Shared
@using DatabaseCommunicator.Models;
@using Microsoft.Extensions.Localization
@using TournamentLibrary.Participants;
@using TournamentLibrary.TournamentParts;
@using Microsoft.AspNetCore.SignalR.Client
@using ChessTournamentManager.Controllers

@inject TournamentManagingController TournamentManagingController
@inject IStringLocalizer<TournamentManagementLabels> _localizer

<div class="mt-3">
    <UIResponseMessageDisappear Message="_message"></UIResponseMessageDisappear>
</div>


<div class="mt-3">
    <EditForm Model="@Model" OnValidSubmit="@(async () => await SendCreateNewPlayer())">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-12 col-md-12 col-xl-4">
                <label for="playerNameInput" class="form-label">@_localizer["registerUnknownPlayerFirstName"]</label>
                <InputText id="playerNameInput" @bind-Value="Model.FirstName" class="form-control"></InputText>
            </div>
            <div class="col-12 col-md-12 col-xl-4">
                <label for="playerNameInput" class="form-label">@_localizer["registerUnknownPlayerMiddleName"]</label>
                <InputText id="playerNameInput" @bind-Value="Model.MiddleName" class="form-control"></InputText>
            </div>
            <div class="col-12 col-md-12 col-xl-4">
                <label for="playerNameInput" class="form-label">@_localizer["registerUnknownPlayerLastName"]</label>
                <InputText id="playerNameInput" @bind-Value="Model.LastName" class="form-control"></InputText>
            </div>
        </div>
        <div class="row">
            <div class="col-12 col-md-6 col-xl-4">
                <label for="eloInput" class="form-label">@_localizer["registerUnknownPlayerElo"]</label>
                <InputNumber id="eloInput" @bind-Value="Model.Elo" class="form-control"></InputNumber>
            </div>
            <div class="col-12 col-md-6 col-xl-4">
                <label for="availableChessClubsCombobox" class="form-label">@_localizer["registerUnknownPlayerChessClub"]</label>
                <InputText id="availableChessClubsCombobox" @bind-Value="Model.ChessClub" class="form-control"></InputText>
            </div>
        </div>
    
        <div class="row mt-3">
            <div class="col-12 col-md-4 col-xl-2">
                <Button Class="form-control" Color="ButtonColor.Success" Type="ButtonType.Submit">@_localizer["registerUnknownPlayerRegisterPlayerButton"]</Button>
            </div>
        </div>
    </EditForm>
</div>

@code {

    /// <summary>
    /// Information about player which will be registered to tournament from form
    /// </summary>
    [SupplyParameterFromForm]
    private Player Model { get; set; } = new();

    /// <summary>
    /// Id of the tournament
    /// </summary>
    [Parameter]
    public string TournamentId { get; set; }

    /// <summary>
    /// UI message
    /// </summary>
    private QuickResponseMessage? _message;

    /// <summary>
    /// Creates new player in database and register him/her to the tournament
    /// </summary>
    /// <returns></returns>
    private async Task SendCreateNewPlayer()
    {
        try
        {
            await TournamentManagingController.RegisterUnknownPlayerToTournament(TournamentId, Model);
        }
        catch
        {
            _message = new UnsuccessfulMessage(_localizer["registerUnknownPlayerDatabaseError"]);
            await InvokeAsync(StateHasChanged);
            return;
        }

        _message = new SuccessfulMessage($"{_localizer["registerUnknownPlayerDatabaseSuccessPart1"]} {Model.DisplayName} {_localizer["registerUnknownPlayerDatabaseSuccessPart2"]}");
        Model = new();
        
        await InvokeAsync(StateHasChanged);
    }
}
