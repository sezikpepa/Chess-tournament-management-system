
@* Page where it is possible to create a new team. *@

@page "/createNewTeam"

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

@using ChessTournamentManager.CodeStructures
@using ChessTournamentManager.Components.Account
@using ChessTournamentManager.Controllers
@using ChessTournamentManager.Data
@using ChessTournamentManager.DataServices
@using ChessTournamentManager.LanguageAssets.TeamManagement
@using ChessTournamentMate.Shared
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@using DatabaseCommunicator.Models;
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using TournamentLibrary.Participants;
@using TournamentLibrary.TournamentHandlers;

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject UserInformation UserInformation
@inject OwnProfileController OwnProfileController

@inject IStringLocalizer<TeamManagementLabels> _localizer;

@inject NavigationUrls NavigationUrls

<title>@_localizer["createNewTeamTitle"]</title>

<QuestionMarkWithHelp ToolTipText="@_localizer["createNewTeamToolTip"]" />

<BasicSpinner Visible="_isLoading"></BasicSpinner>

@if (!_isLoading)
{
	<Button Color="ButtonColor.Success" @onclick="() => NavigationUrls.ToTeamsManagementPage()">@_localizer["createNewTeamToManagementButton"]</Button>

	@if (_isAccountFilled)
	{
		<div class="mt-3">
			<CreateNewTeam></CreateNewTeam>
		</div>
	}
	else
	{
		<div class="mt-3">
			<InfoAboutNotCompletedProfile Message="@_localizer["createNewTeamNotFilledProfile"]"></InfoAboutNotCompletedProfile>
		</div>
	}
}



@code {

	/// <summary>
	/// Logged user filled personal information
	/// </summary>
	private bool _isAccountFilled = false;

	/// <summary>
	/// Page is still retreiving data drom database
	/// </summary>
	private bool _isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		_isLoading = true;
		DateTime initializeStart = DateTime.Now;

		string accountId = (await UserInformation.GetLoggedUserIdAsync())!;

		_isAccountFilled = await OwnProfileController.AccountHasFilledProfile(accountId);

		await Task.Delay(Math.Max((initializeStart.AddMilliseconds(300) - DateTime.Now).Milliseconds, 0));
		_isLoading = false;
	}


}
